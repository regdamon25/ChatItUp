{"version":3,"sources":["Events.js","Factories.js","components/LoginForm.js","components/sidebar/SideBarOption.js","components/sidebar/SideBar.js","components/chats/ChatHeading.js","components/messages/Messages.js","components/messages/MessageInput.js","components/chats/ChatContainer.js","components/Layout.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","COMMUNITY_CHAT","USER_CONNECTED","MESSAGE_RECEIVED","MESSAGE_SENT","USER_DISCONNECTED","TYPING","VERIFY_USER","LOGOUT","PRIVATE_MESSAGE","NEW_CHAT_USER","uuidv4","require","createChatNameFromUsers","users","excludedUser","arguments","length","undefined","filter","u","join","getTime","date","concat","getHours","getMinutes","slice","createMessage","_ref2","_ref2$message","message","_ref2$sender","sender","id","time","Date","now","createChat","_ref3","_ref3$messages","messages","_ref3$users","name","_ref3$isCommunity","isCommunity","typingUsers","createUser","_ref","_ref$name","_ref$socketId","socketId","LoginForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setUser","user","isUser","setError","handleSubmit","e","preventDefault","socket","nickname","state","emit","handleChange","setState","target","value","error","_this2","_this$state","react_default","a","createElement","className","onSubmit","htmlFor","ref","input","textInput","type","onChange","placeholder","Component","SideBarOption","_Component","apply","inherits","createClass","key","_this$props","lastMessage","active","onClick","toUpperCase","defaultProps","SideBar","receiver","onSendPrivateMessage","console","log","addChatForUser","username","setActiveSideBar","CHATS","newSideBar","activeSideBar","chats","activeChat","setActiveChat","logout","fa","md","USERS","refs","map","chat","SideBarOption_SideBarOption","lastmessage","get","last","differenceBy","otherUser","onCLick","title","ChatHeading","numberOfUsers","io","Messages","scrollDown","bind","assertThisInitialized","container","scrollTop","scrollHeight","prevProps","prevState","mes","MessageInput","sendMessage","sendTyping","lastUpdateTime","isTyping","startCheckingTyping","typingInterval","setInterval","stopCheckingTyping","clearInterval","autoComplete","onKeyUp","keyCode","disabled","ChatContainer","sendOpenPrivateMessage","addUserToChat","chatId","newUser","newChats","assign","toConsumableArray","removeUsersFromChat","removedUsers","newUsers","difference","resetChat","addChat","reset","messageEvent","typingEvent","on","updateTypingInChat","addMessageToChat","push","includes","initSocket","off","values","_this3","_this$props2","SideBar_SideBar","Messages_Messages","MessageInput_MessageInput","socketUrl","Layout","reconnect","ChatContainer_ChatContainer","LoginForm_LoginForm","App","Layout_Layout","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.08189c97.chunk.js","sourcesContent":[" /*jshint esversion: 6 */\r\n \r\n module.exports = {\r\n     COMMUNITY_CHAT:\"COMMUNITY_CHAT\",\r\n     USER_CONNECTED:\"USER_CONNECTED\",\r\n     MESSAGE_RECEIVED:\"MESSAGED_RECEIVED\",\r\n     MESSAGE_SENT:\"MESSAGE_SENT\",\r\n     USER_DISCONNECTED:\"USER_DISCONNECTED\",\r\n     TYPING:\"TYPING\",\r\n     VERIFY_USER:\"VERIFY_USER\",\r\n     LOGOUT:\"LOGOUT\",\r\n     PRIVATE_MESSAGE:\"PRIVATE_MESSAGE\",\r\n     NEW_CHAT_USER:\"NEW_CHAT_USER\",\r\n };","/*jshint esversion: 6 */\r\n\r\nconst uuidv4 = require('uuid/v4');\r\n\r\nconst createUser = ({name = \"\", socketId = null } = {}) =>(\r\n    {\r\n        id:uuidv4(),\r\n        name,\r\n        socketId\r\n    }\r\n);\r\n\r\n\r\nconst createMessage = ({message = \"\", sender = \"\"} = { })=>(\r\n    {\r\n        id:uuidv4(),\r\n        time:getTime(new Date(Date.now())),\r\n        message,\r\n        sender\r\n    }\r\n);\r\n\r\nconst createChat = ({messages = [], name = \"Community\", users = [], isCommunity = false } = {}) =>(\r\n        {\r\n          id:uuidv4(),\r\n          name: isCommunity ? \"Community\" : createChatNameFromUsers(users),\r\n          messages,\r\n          users,\r\n          typingUsers:[],\r\n          isCommunity  \r\n        }\r\n    );\r\n\r\n    const createChatNameFromUsers = (users, excludedUser = \"\")=>{\r\n      return users.filter(u => u !== excludedUser).join(' & ') || \"Empty Users\"; \r\n    }\r\n\r\n\r\nconst getTime = (date) => {\r\n        return `${date.getHours()}:${(\"0\" + date.getMinutes()).slice(-2)}`;\r\n    }; \r\n\r\n    module.exports = {\r\n        createMessage: createMessage,\r\n        createChat: createChat,\r\n        createUser: createUser,\r\n        createChatNameFromUsers: createChatNameFromUsers\r\n    };\r\n\r\n    \r\n\r\n\r\n","/*jshint esversion: 6 */\r\n\r\nimport React, { Component } from 'react';\r\n\r\nimport { VERIFY_USER } from '../Events';\r\n\r\n\r\n\r\nexport default class LoginForm extends Component {\r\n\r\n\tconstructor(props) {\r\n\r\n\t  super(props);\r\n\r\n\t\r\n\r\n\t  this.state = {\r\n\r\n\t  \tnickname:\"\",\r\n\r\n\t  \terror:\"\"\r\n\r\n\t  };\r\n\r\n\t}\r\n\r\n\r\n\r\n\tsetUser = ({user, isUser})=>{\r\n\r\n\r\n\r\n\t\tif(isUser){\r\n\r\n\t\t\tthis.setError(\"User name taken\")\r\n\r\n\t\t}else{\r\n\r\n\t\t\tthis.setError(\"\")\r\n            \r\n\t\t\tthis.props.setUser(user)\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\r\n\thandleSubmit = (e)=>{\r\n\r\n\t\te.preventDefault()\r\n\r\n\t\tconst { socket } = this.props;\r\n\r\n\t\tconst { nickname } = this.state;\r\n\r\n\t\tsocket.emit(VERIFY_USER, nickname, this.setUser)\r\n\r\n\t}\r\n\r\n\r\n\r\n\thandleChange = (e)=>{\r\n\r\n\t\tthis.setState({nickname:e.target.value});\r\n\r\n\t}\r\n\r\n\r\n\r\n\tsetError = (error)=>{\r\n\r\n\t\tthis.setState({error});\r\n\r\n\t}\r\n\r\n\r\n\r\n\trender() {\t\r\n\r\n\t\tconst { nickname, error } = this.state;\r\n\r\n\t\treturn (\r\n\r\n\t\t\t<div className=\"login\">\r\n\r\n\t\t\t\t<form onSubmit={this.handleSubmit} className=\"login-form\" >\r\n\r\n\r\n\r\n\t\t\t\t\t<label htmlFor=\"nickname\">\r\n\r\n\t\t\t\t\t\t<h2>Got a Username?</h2>\r\n\r\n\t\t\t\t\t</label>\r\n\r\n\t\t\t\t\t<input\r\n\r\n\t\t\t\t\t\tref={(input)=>{ this.textInput = input }} \r\n\r\n\t\t\t\t\t\ttype=\"text\"\r\n\r\n\t\t\t\t\t\tid=\"nickname\"\r\n\r\n\t\t\t\t\t\tvalue={nickname}\r\n\r\n\t\t\t\t\t\tonChange={this.handleChange}\r\n\r\n\t\t\t\t\t\tplaceholder={'Enter it here'}\r\n\r\n\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t<div className=\"error\">{error ? error:null}</div>\r\n\r\n\r\n\r\n\t\t\t\t</form>\r\n\r\n\t\t\t</div>\r\n\r\n\t\t);\r\n\r\n\t}\r\n\r\n}","/*jshint esversion: 6 */\r\n\r\nimport React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class SideBarOption extends Component {\r\n    static propTypes = {\r\n        name: PropTypes.string.isRequired,\r\n        lastMessage: PropTypes.string,\r\n        active: PropTypes.bool,\r\n        onClick: PropTypes.func\r\n    }\r\n    static defaultProps = {\r\n        lastMessage: \"\",\r\n        active: false,\r\n        onClick: () => {}\r\n    }\r\n\r\n    render() {\r\n        const { name, lastMessage, active, onClick } = this.props;\r\n        return (\r\n            <div\r\n            className = {`user ${active ? 'active': '' }`}\r\n            onClick={ onClick }\r\n            >\r\n            <div className=\"user-photo\">{name[0].toUpperCase()}</div>\r\n            <div className=\"user-info\">\r\n                <div className=\"name\">{name}</div>\r\n                {lastMessage && <div className=\"last-message\">{lastMessage}</div>}\r\n            </div>\r\n\r\n        \r\n            </div>\r\n        );\r\n    }\r\n}","/*jshint esversion: 6 */\r\n\r\nimport React, { Component } from 'react';\r\nimport { FaChevronDown } from 'react-icons/fa';\r\nimport { MdMenu } from \"react-icons/md\";\r\nimport { MdSearch } from 'react-icons/md';\r\nimport { MdEject } from 'react-icons/md';\r\nimport { SideBarOption } from './SideBarOption';\r\nimport {get, last, differenceBy } from 'lodash';\r\nimport { createChatNameFromUsers } from '../../Factories';\r\n\r\n\r\n\r\n\r\nexport default class SideBar extends Component {\r\n\r\n    static type = {\r\n        CHATS: \"chats\",\r\n        USERS: \"users\",\r\n    }\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            receiver:\"\",\r\n            activeSideBar: SideBar.type.CHATS\r\n        };\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        const { receiver } = this.state;\r\n        const { onSendPrivateMessage} = this.props;\r\n        console.log(receiver)\r\n        \r\n        onSendPrivateMessage(receiver)\r\n        this.setState({receiver:\"\"})\r\n\r\n    }\r\n\r\n    addChatForUser = (username) => {\r\n        this.props.onSendPrivateMessage( username )\r\n        this.setActiveSideBar(SideBar.type.CHATS)\r\n    }\r\n\r\n    setActiveSideBar = (newSideBar) => {\r\n       this.setState({ activeSideBar:newSideBar }) \r\n    }\r\n\r\n    render() {\r\n        const { chats, activeChat, user, setActiveChat, logout, users } = this.props;\r\n        const { receiver, activeSideBar } = this.state;\r\n        return (\r\n            <div id=\"side-bar\">\r\n            <div className=\"heading\">\r\n            <div className=\"app-name\">Our Cool Chat<FaChevronDown /></div>\r\n            <div className = \"menu\">\r\n                <MdMenu />\r\n\r\n            </div>\r\n            </div>\r\n            <form onSubmit={this.handleSubmit} className=\"search\">\r\n            <i className=\"search-icon\"><MdSearch /></i>\r\n            <input \r\n                placeholder=\"Search\" \r\n                type=\"text\"\r\n                value={receiver}\r\n                onChange={(e)=>{this.setState({receiver:e.target.value}) }}/>\r\n            <div className= \"plus\"></div>\r\n            </form>\r\n            <div className=\"side-bar-select\">\r\n            <div\r\n                onClick = { ()=>{ this.setActiveSideBar(SideBar.type.CHATS)}}\r\n                className ={ `side-bar-select__option ${(activeSideBar === SideBar.type.CHATS) ? 'active': ''}` }>\r\n                <span>Chats</span>\r\n                </div>\r\n            <div\r\n                onClick = { ()=>{ this.setActiveSideBar(SideBar.type.USERS)}}\r\n                className ={ `side-bar-select__option ${(activeSideBar === SideBar.type.USERS) ? 'active': ''}` }>\r\n                <span>Users</span>\r\n                </div>\r\n            </div>\r\n            <div\r\n                className='users'\r\n                ref='users'\r\n                onClick={(e)=>{(e.target === this.refs.user) && setActiveChat(null) }}>\r\n                {\r\n                    activeSideBar === SideBar.type.CHATS ? \r\n                chats.map((chat) => {\r\n                    if(chat.name){\r\n                        return(\r\n                            <SideBarOption\r\n                            key = { chat.id }\r\n                            name = { chat.isCommunity ? chat.name : createChatNameFromUsers(chat.users, user.name)  }\r\n                            lastmessage = { get(last(chat.messages), 'message', '') }\r\n                            active = { activeChat.id === chat.id }\r\n                            onClick = { () => { this.props.setActiveChat(chat) } }\r\n                            />\r\n                        )\r\n                        }                                              \r\n\r\n                        return null\r\n                    })\r\n                    \r\n                    :\r\n                        \r\n                        differenceBy(users, [user], 'name').map((otherUser)=>{\r\n                            return (\r\n                                <SideBarOption\r\n                                key = { otherUser.id }\r\n                                name = { otherUser.name }\r\n                                onCLick = { () => {this.addChatForUser( otherUser.name) } }\r\n                                />\r\n                            )\r\n                        })\r\n                    }\r\n        </div>\r\n        <div className=\"current-user\">\r\n        <span>{user.name}</span>\r\n            <div onClick={()=>{logout()}} title=\"Logout\" className=\"logout\">\r\n                    <MdEject />\r\n            </div>\r\n        </div>\r\n</div>\r\n);\r\n    }\r\n}","/*jshint esversion: 6 */\r\n\r\nimport React from 'react';\r\nimport { IoIosVideocam } from 'react-icons/io';\r\nimport { FaUserPlus } from \"react-icons/fa\";\r\nimport { FaEllipsisV } from \"react-icons/fa\";\r\n\r\nexport default function({name, numberOfUsers}) {\r\n        return (\r\n            <div className = \"chat-header\">\r\n                <div className = \"user-info\">\r\n                    <div className = \"user-name\">{name}</div>\r\n                    <div className = \"status\">\r\n                        <div className = \"indicator\"></div>\r\n                        <span>{numberOfUsers ? numberOfUsers : null}</span>\r\n                    </div>\r\n                </div>\r\n            <div className = \"options\">\r\n                    <IoIosVideocam />\r\n                    <FaUserPlus />\r\n                    <FaEllipsisV />\r\n            \r\n                </div>\r\n        </div>\r\n        );\r\n    }\r\n","/*jshint esversion: 6 */\r\n\r\nimport React, { Component } from 'react';\r\n\r\n\r\n\r\nexport default class Messages extends Component {\r\n\r\n\tconstructor(props) {\r\n\r\n\t  super(props);\r\n\r\n\t\t\r\n\r\n\t\tthis.scrollDown = this.scrollDown.bind(this);\r\n\r\n\t}\r\n\r\n\r\n\r\n\tscrollDown(){\r\n\r\n\t\tconst { container } = this.refs;\r\n\r\n\t\tcontainer.scrollTop = container.scrollHeight;\r\n\r\n\t}\r\n\r\n\r\n\r\n\tcomponentDidMount() {\r\n\r\n\t\tthis.scrollDown();\r\n\r\n\t}\r\n\r\n\r\n\r\n\tcomponentDidUpdate(prevProps, prevState) {\r\n\r\n\t\tthis.scrollDown();\r\n\r\n\t}\r\n\r\n\t\r\n\r\n\trender() {\r\n\r\n\t\tconst { messages, user, typingUsers } = this.props;\r\n\r\n\t\treturn (\r\n\r\n\t\t\t<div ref='container'\r\n\r\n\t\t\t\tclassName=\"thread-container\">\r\n\r\n\t\t\t\t<div className=\"thread\">\r\n\r\n\t\t\t\t\t{\r\n\r\n\t\t\t\t\t\tmessages.map((mes)=>{\r\n\r\n\t\t\t\t\t\t\treturn (\r\n\r\n\t\t\t\t\t\t\t\t<div\r\n\r\n\t\t\t\t\t\t\t\t\tkey={mes.id}\r\n\r\n\t\t\t\t\t\t\t\t\tclassName={`message-container ${mes.sender === user.name && 'right'}`}\r\n\r\n\t\t\t\t\t\t\t\t>\r\n\r\n\t\t\t\t\t\t\t\t\t<div className=\"time\">{mes.time}</div>\r\n\r\n\t\t\t\t\t\t\t\t\t<div className=\"data\">\r\n\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"message\">{mes.message}</div>\r\n\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"name\">{mes.sender}</div>\r\n\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t\t</div>\r\n\r\n\r\n\r\n\t\t\t\t\t\t\t\t)\r\n\r\n\t\t\t\t\t\t})\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t{\r\n\r\n\t\t\t\t\t\ttypingUsers.map((name)=>{\r\n\r\n\t\t\t\t\t\t\treturn (\r\n\r\n\t\t\t\t\t\t\t\t<div key={name} className=\"typing-user\">\r\n\r\n\t\t\t\t\t\t\t\t\t{`${name} is typing . . .`}\r\n\r\n\t\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t)\r\n\r\n\t\t\t\t\t\t})\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t</div>\r\n\r\n\r\n\r\n\r\n\r\n\t\t\t</div>\r\n\r\n\t\t);\r\n\r\n\t}\r\n\r\n}","/*jshint esversion: 6 */\r\n/*moz*/\r\n\r\nimport React, { Component } from 'react';\r\n\r\nexport default class MessageInput extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            message:\"\",\r\n            isTyping:false\r\n        };\r\n\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n\r\n\t\te.preventDefault()\r\n\t\tthis.sendMessage()\r\n\t\tthis.setState({message:\"\"})\r\n\r\n\t}\r\n\r\n    sendMessage = () => {\r\n        this.props.sendMessage(this.state.message);\r\n    }\r\n\r\n    componentWillMount(){\r\n        this.stopCheckingTyping();\r\n    }\r\n\r\n    sendTyping = () => {\r\n        this.lastUpdateTime = Date.now();\r\n        if(!this.state.isTyping){\r\n            this.setState({isTyping:true});\r\n            this.props.sendTyping(true);\r\n            this.startCheckingTyping();\r\n        }\r\n    };\r\n\r\n    /*\r\n\t*\tstartCheckingTyping\r\n\t*\tStart an interval that checks if the user is typing.\r\n    */\r\n    \r\n    startCheckingTyping = () => {\r\n        this.typingInterval = setInterval(() =>{\r\n            if((Date.now() - this.lastUpdateTime) > 300){\r\n                this.setState({isTyping:false});\r\n                this.stopCheckingTyping();\r\n            }\r\n        }, 300);\r\n        };\r\n\r\n     /*\r\n\r\n\t*\tstopCheckingTyping\r\n\t*\tStart the interval from checking if the user is typing.\r\n    */\r\n    \r\n    stopCheckingTyping = () => {\r\n        if(this.typingInterval){\r\n            clearInterval(this.typingInterval);\r\n            this.props.sendTyping(false);\r\n        }\r\n    };\r\n\r\n\r\n    render() {\r\n        const { message } = this.state;\r\n        return (\r\n            <div className=\"message-input\">\r\n            <form\r\n                onSubmit={ this.handleSubmit }\r\n                 className = 'message-form'>\r\n                \r\n                <input\r\n                \r\n                    id = 'message'\r\n                    ref = {\"messageinput\"}\r\n                    type = 'text'\r\n                    className = 'form-control'\r\n                    value = { message }\r\n                    autoComplete = { 'off' }\r\n                    placeholder = 'talk to me!'\r\n                    onKeyUp = { e => { e.keyCode !== 13 && this.sendTyping() } }\r\n                    onChange = {\r\n                        ({target}) => {\r\n                            this.setState({message:target.value})\r\n                        }\r\n                    }\r\n                    />\r\n                <button\r\n                        disabled = { message.length < 1 }\r\n                        type = \"submit\"\r\n                        className = \"send\"\r\n                    > Send </button>\r\n                    </form>\r\n\r\n                    </div>\r\n        );\r\n    }\r\n}","/*jshint esversion: 6 */\r\n\r\nimport React, { Component } from 'react';\r\nimport SideBar from '../sidebar/SideBar';\r\nimport { COMMUNITY_CHAT, MESSAGE_SENT, MESSAGE_RECEIVED, TYPING, PRIVATE_MESSAGE, USER_CONNECTED, USER_DISCONNECTED, NEW_CHAT_USER } from '../../Events';\r\nimport ChatHeading from './ChatHeading';\r\nimport Messages from '../messages/Messages';\r\nimport MessageInput from '../messages/MessageInput';\r\nimport { values, difference, differenceBy } from 'lodash';\r\n\r\n\r\nexport default class ChatContainer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n        chats:[],\r\n        users:[],\r\n        activeChat:null,\r\n        \r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { socket } = this.props;\r\n        this.initSocket(socket);\r\n        socket.emit(COMMUNITY_CHAT, this.resetChat);\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        const { socket } = this.props;\r\n        socket.off( PRIVATE_MESSAGE);\r\n        socket.off( USER_CONNECTED);\r\n        socket.off( USER_DISCONNECTED);\r\n        socket.off(NEW_CHAT_USER);\r\n    }\r\n    initSocket(socket){\r\n        socket.emit(COMMUNITY_CHAT, this.resetChat);\r\n        socket.on(PRIVATE_MESSAGE, this.addChat);\r\n        socket.on('connect', ()=>{\r\n            socket.emit(COMMUNITY_CHAT, this.resetChat);\r\n        });\r\n        socket.on(USER_CONNECTED, (users)=>{\r\n            this.setState({users: values(users) });  \r\n        });\r\n        socket.on(USER_DISCONNECTED, (users)=>{\r\n            const removedUsers = differenceBy( this.state.users, values(users), 'id');\r\n            this.removeUsersFromChat(removedUsers);\r\n            this.setState({users: values(users) });\r\n        });  \r\n        socket.on(NEW_CHAT_USER, this.addUserToChat);\r\n    }\r\n\r\n    sendOpenPrivateMessage = (receiver) => {\r\n        const { socket, user } = this.props;\r\n        const { activeChat } = this.state;\r\n        socket.emit(PRIVATE_MESSAGE, {receiver, sender:user.name, activeChat});\r\n    };\r\n\r\n    addUserToChat = ({ chatId, newUser }) => {\r\n        const { chats } = this.state;\r\n        const newChats = chats.map( chat => {\r\n            if(chat.id === chatId){\r\n                return Object.assign({}, chat, { users: [ ...chat.users, newUser ] });\r\n            }\r\n            return chat\r\n        })\r\n        this.setState({ chats:newChats })\r\n    }\r\n\r\n    removeUsersFromChat = removedUsers => {\r\n        const { chats } = this.state;\r\n        const newChats = chats.map( chat => {\r\n            let newUsers = difference( chat.users, removedUsers.map( u => u.name ) )\r\n            return Object.assign({}, chat, {users: newUsers })\r\n        })\r\n        this.setState({ chats: newChats })\r\n    }\r\n\r\n    /*\r\n\r\n\t*\tReset the chat back to only the chat passed in.\r\n\r\n\t* \t@param chat {Chat}\r\n\r\n    */\r\n\r\n    resetChat = (chat)=>{\r\n        return this.addChat(chat, true);\r\n    };\r\n\r\n    /*\r\n\r\n\t*\tAdds chat to the chat container, if reset is true removes all chats\r\n\r\n\t*\tand sets that chat to the main chat.\r\n\r\n\t*\tSets the message and typing socket events for the chat.\r\n\r\n\t*\t\r\n\r\n\t*\t@param chat {Chat} the chat to be added.\r\n\r\n\t*\t@param reset {boolean} if true will set the chat as the only chat.\r\n\r\n    */\r\n    \r\n   addChat = (chat, reset = false)=>{\r\n\r\n    const { socket } = this.props;\r\n    const { chats } = this.state;\r\n    const newChats = reset ? [chat] : [...chats, chat];\r\n    this.setState({chats:newChats, activeChat:reset ? chat : this.state.activeChat});\r\n\r\n    const messageEvent = `${MESSAGE_RECEIVED}-${chat.id}`;\r\n    const typingEvent = `${TYPING}-${chat.id}`;\r\n\r\n    socket.on(typingEvent, this.updateTypingInChat(chat.id));\r\n    socket.on(messageEvent, this.addMessageToChat(chat.id));\r\n\r\n};\r\n\r\n\r\n    \r\n\r\n \r\n     /*\r\n\r\n\t* \tReturns a function that will \r\n\r\n\t*\tadds message to chat with the chatId passed in. \r\n\r\n\t*\r\n\r\n\t* \t@param chatId {number}\r\n\r\n    */\r\n\r\n    addMessageToChat = (chatId) => {\r\n        return message => {\r\n            const { chats } = this.state\r\n            let newChats = chats.map((chat)=>{\r\n                if(chat.id === chatId)\r\n                chat.messages.push(message);\r\n                return chat;\r\n            });\r\n\r\n            this.setState({chats:newChats});\r\n        };\r\n    };\r\n\r\n    /*\r\n\r\n\t*\tUpdates the typing of chat with id passed in.\r\n\r\n\t*\t@param chatId {number}\r\n\r\n    */\r\n    \r\n    updateTypingInChat = (chatId) => {\r\n        return ({isTyping, user}) => {\r\n            if(user !== this.props.user.name){\r\n\r\n                const { chats } = this.state;\r\n\r\n                let newChats = chats.map((chat) => {\r\n                    if(chat.id === chatId) {\r\n                        if(isTyping && !chat.typingUsers.includes(user)){\r\n                            chat.typingUsers.push(user);\r\n                        }else if(!isTyping && chat.typingUsers.includes(user)){\r\n                            chat.typingUsers = chat.typingUsers.filter(u => u !== user);\r\n                        }\r\n                    }\r\n                    return chat;\r\n                });\r\n                this.setState({chats:newChats});\r\n            }\r\n        };\r\n    };\r\n    \r\n     /*\r\n\r\n\t*\tAdds a message to the specified chat\r\n\r\n\t*\t@param chatId {number}  The id of the chat to be added to.\r\n\r\n\t*\t@param message {string} The message to be added to the chat.\r\n\r\n    */\r\n\r\n    sendMessage = (chatId, message) => {\r\n        const { socket } = this.props;\r\n        socket.emit(MESSAGE_SENT, {chatId, message} );\r\n    };\r\n\r\n    /*\r\n\r\n\t*\tSends typing status to server.\r\n\r\n\t*\tchatId {number} the id of the chat being typed in.\r\n\r\n\t*\ttyping {boolean} If the user is typing still or not.\r\n\r\n\t*/\r\n\r\n    sendTyping = (chatId, isTyping) => {\r\n        const { socket } = this.props;\r\n        socket.emit(TYPING, {chatId, isTyping});\r\n    };\r\n\r\n    setActiveChat = (activeChat) => {\r\n        this.setState({activeChat});\r\n    };\r\n    render() {\r\n\r\n\t\tconst { user, logout } = this.props;\r\n\t\tconst { chats, activeChat, users } = this.state;\r\n\r\n\t\treturn (\r\n\r\n\t\t\t<div className=\"container\">\r\n\r\n\t\t\t\t<SideBar\r\n\r\n\t\t\t\t\tlogout={logout}\r\n\t\t\t\t\tchats={chats}\r\n                    user={user}\r\n                    users={users}\r\n\t\t\t\t\tactiveChat={activeChat}\r\n                    setActiveChat={this.setActiveChat}\r\n                    onSendPrivateMessage={this.sendOpenPrivateMessage}\r\n\t\t\t\t\t/>\r\n\r\n\t\t\t\t<div className=\"chat-room-container\">\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tactiveChat !== null ? (\r\n\t\t\t\t\t\t\t<div className=\"chat-room\">\r\n\r\n\t\t\t\t\t\t\t\t<ChatHeading name={activeChat.name} />\r\n\r\n                                <Messages \r\n                                \r\n\t\t\t\t\t\t\t\t\tmessages={activeChat.messages}\r\n\t\t\t\t\t\t\t\t\tuser={user}\r\n                                    typingUsers={activeChat.typingUsers}\r\n                                    />\r\n                                    \r\n                                <MessageInput\r\n                                 \r\n\t\t\t\t\t\t\t\t\tsendMessage={\r\n\t\t\t\t\t\t\t\t\t\t(message)=>{\r\n\t\t\t\t\t\t\t\t\t\t\tthis.sendMessage(activeChat.id, message)\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tsendTyping={\r\n\t\t\t\t\t\t\t\t\t\t(isTyping)=>{\r\n\t\t\t\t\t\t\t\t\t\t\tthis.sendTyping(activeChat.id, isTyping)\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n                                    />\r\n                                    \r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t):\r\n\t\t\t\t\t\t<div className=\"chat-room choose\">\r\n\t\t\t\t\t\t\t<h3>Choose a chat!</h3>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}","/*jshint esversion: 6 */\r\n\r\nimport React, { Component } from 'react';\r\n\r\nimport io from 'socket.io-client';\r\n\r\nimport { USER_CONNECTED, LOGOUT, VERIFY_USER } from '../Events';\r\n\r\nimport LoginForm from './LoginForm';\r\n\r\nimport ChatContainer from './chats/ChatContainer';\r\n\r\n\r\n\r\nconst socketUrl = \"/\";\r\n\r\nexport default class Layout extends Component {\r\n\r\n\t\r\n\r\n\tconstructor(props) {\r\n\r\n\t  super(props);\r\n\r\n\t\r\n\r\n\t  this.state = {\r\n\r\n\t  \tsocket:null,\r\n\r\n\t  \tuser:null\r\n\r\n\t  };\r\n\r\n\t}\r\n\r\n\r\n\r\n\tcomponentWillMount() {\r\n\r\n\t\tthis.initSocket();\r\n\r\n\t}\r\n\r\n\r\n\r\n\t/*\r\n\r\n\t*\tConnect to and initializes the socket.\r\n\r\n\t*/\r\n\r\n\tinitSocket = ()=>{\r\n\r\n\t\tconst socket = io(socketUrl);\r\n\r\n\r\n\r\n\t\tsocket.on('connect', ()=>{\r\n\t\t\tif(this.state.user){\r\n\t\t\t\tthis.reconnect(socket)\r\n\t\t\t}else{\r\n\t\t\tconsole.log(\"Connected\")\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\t\r\n\r\n\t\tthis.setState({socket});\r\n\r\n\t}\r\n\r\n\treconnect = (socket) => {\r\n\t\tsocket.emit(VERIFY_USER, this.state.user.name, ({ isUser, user })=>{\r\n\t\t\tif(isUser){\r\n\t\t\t\tthis.setState({ user: null });\r\n\t\t\t}else{\r\n\t\t\t\tthis.setUser(user);\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\r\n\r\n\t/*\r\n\r\n\t* \tSets the user property in state \r\n\r\n\t*\t@param user {id:number, name:string}\r\n\r\n\t*/\t\r\n\r\n\tsetUser = (user)=>{\r\n\r\n\t\tconst { socket } = this.state\r\n\r\n\t\tsocket.emit(USER_CONNECTED, user);\r\n\r\n\t\tthis.setState({user})\r\n\r\n\t}\r\n\r\n\r\n\r\n\t/*\r\n\r\n\t*\tSets the user property in state to null.\r\n\r\n\t*/\r\n\r\n\tlogout = ()=>{\r\n\r\n\t\tconst { socket } = this.state\r\n\r\n\t\tsocket.emit(LOGOUT)\r\n\r\n\t\tthis.setState({user:null})\r\n\r\n\r\n\r\n\t}\r\n\r\n\r\n\r\n\r\n\r\n\trender() {\r\n\t\t\r\n\t\tconst { socket, user } = this.state;\r\n\r\n\t\treturn (\r\n\r\n\t\t\t<div className=\"container\">\r\n\r\n\t\t\t\t{\r\n\r\n\t\t\t\t\t!user ?\t\r\n\r\n\t\t\t\t\t<LoginForm socket={socket} setUser={this.setUser} />\r\n\r\n\t\t\t\t\t:\r\n\r\n\t\t\t\t\t<ChatContainer socket={socket} user={user} logout={this.logout}/>\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t</div>\r\n\r\n\t\t);\r\n\r\n\t}\r\n\r\n}\r\n","/*jshint esversion: 6 */\n\nimport React, { Component } from 'react';\nimport Layout from './components/Layout';\nimport './index.scss';\n\n\nclass App extends Component {\n  render() {\n    return (\n       <Layout />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/*jshint esversion: 6 */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}